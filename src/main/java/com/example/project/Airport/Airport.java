package com.example.project.Airport;
import java.util.ArrayList;

public class Airport  {
    /** A list of the flights into and out of this airport
     *  Guaranteed not to be null and to contain only non-null entries
     */
    private ArrayList<Flight> allFlights;

    public Airport(ArrayList<Flight> flights) {
        allFlights = flights;
    }

    public ArrayList<Flight> getAllFlights() {
        return allFlights;
    }

    /** Returns the revenue generated by all flights at the airport,
     *  as described in part (a)
     */
    public double getTotalRevenue() {
        double totalRevenue = 0;

        for (Flight flight : allFlights) {
            if (flight.getNumPassengers() > flight.getCapacity()) {
                totalRevenue += flight.getPrice() * flight.getCapacity();
            } else {
                totalRevenue += flight.getPrice() * flight.getNumPassengers();
            }
        }
        return totalRevenue;
    }

    /** Updates the list of flights by removing certain flights and
     *  returns the total number of passengers whose flights were removed,
     *  as described in part (b)
     */
    public int updateFlights2() {
        // sum of total passengers with removed flights
        int numPassengers = 0;

        // iterate in reverse; could also go forward and i-- inside code
        for (int i = allFlights.size() - 1; i >= 0; i--) {
            Flight currentFlight = allFlights.get(i);

            // get 20% of capacity; cast to int since we are talking about whole people
            int minCapacity = (int) (currentFlight.getCapacity() * 0.2);
            int passengers = currentFlight.getNumPassengers();
            if (passengers < minCapacity) {
                // update sum and remove flight
                numPassengers += passengers;
                allFlights.remove(i); // since we are iterating in reverse, no need to i--
            }
        }
        return numPassengers;
    }

    public int updateFlights() {
        // sum of total passengers with removed flights
        int numPassengers = 0;

        // iterate in reverse; could also go forward and i-- inside code
        for (int i = 0; i < allFlights.size(); i++) {
            Flight currentFlight = allFlights.get(i);

            // get 20% of capacity; cast to int since we are talking about whole people
            int minCapacity = (int) (currentFlight.getCapacity() * 0.2);
            int passengers = currentFlight.getNumPassengers();
            if (passengers < minCapacity) {
                // update sum and remove flight
                numPassengers += passengers;
                allFlights.remove(i);
                i--;    // "back up" to avoid skipping after removal
            }
        }
        return numPassengers;
    }
}